#include <benchmark/benchmark.h>

#include "openomd/omdcprocessor.h"
#include "openomd/nooplinearbitration.h"
#include "openomd/omdbaseprocessor.h"

class OMDCBench : public openomd::OMDCProcessor<openomd::NoopLineArbitration, openomd::BaseProcessor> {
public:
    OMDCBench(bool &tc) : _tc{tc} {}

protected:
    bool &_tc;
};

template <typename _Processor>
void processMsg(char* msg, size_t size)
{
    bool tc = false;
    _Processor processor{tc};
    openomd::OmdcParser parser;
    parser.parse(msg, size, processor);
}

static void BM_openomdparser(benchmark::State& state) {
    struct Processor : public OMDCBench
    {
        using OMDCBench::OMDCBench;
        void onMessage(omdc::sbe::SecurityDefinition const& sr, uint32_t)
        {
            _tc = true;
        }

        using OMDCProcessor::onMessage;
    };

    char msg[] = "\x98\x05\x03\x02\x82\x0d\x00\x00\x00\xc8\xb9\xc1\x08\xf5\x12\x15" \
        "\xd8\x01\x0b\x00\x8f\x2c\x00\x00\x4d\x41\x49\x4e\x4e\x4c\x30\x30" \
        "\x31\x32\x34\x38\x34\x35\x31\x33\x57\x52\x4e\x54\x03\x00\x30\x31" \
        "\x42\x50\x2d\x49\x43\x42\x43\x40\x45\x43\x31\x38\x31\x30\x42\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x48\x4b\x44\xe5\x5d\x4c\x88\xd5" \
        "\x6c\xf4\x5d\x6b\x51\x41\x53\xfc\x8c\x22\xff\x00\x30\x00\x30\x00" \
        "\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\xe5\x5d\x4c\x88\xd5\x6c\xf4\x5d\x6b" \
        "\x51\x41\x53\x2d\x8d\x22\xff\x00\x30\x00\x30\x00\x30\x00\x30\x00" \
        "\x30\x00\x30\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00\x44\x02\x00\x00\x4e" \
        "\x4e\x4e\x59\x4e\x4e\x4e\x00\x4d\xc8\x33\x01\x00\x00\x00\x00\x45" \
        "\x58\x45\x52\x20\x44\x41\x54\x45\x3a\x30\x33\x2f\x31\x30\x2f\x31" \
        "\x38\x20\x2a\x4c\x50\x39\x36\x39\x32\x2d\x32\x31\x30\x38\x20\x35" \
        "\x36\x30\x30\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" \
        "\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x20\x20\x20\x00\x00\x00\x00\x20\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x03\x00\x00\x64\x19" \
        "\x00\x00\x00\x00\x00\x00\x0b\xf0\x33\x01\x43\x45\x00\x00\x4e\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x20\x20\x20" \
        "\x20\x20\x20\x20\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00" \
        "\x76\x05\x00\x00\xe8\x03\x00\x00";
    for (auto _ : state){
        processMsg<Processor>(msg, sizeof(msg) - 1);
    }
}
// Register the function as a benchmark
BENCHMARK(BM_openomdparser);

BENCHMARK_MAIN();